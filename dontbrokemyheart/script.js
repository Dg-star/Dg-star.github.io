// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = "7663707783:AAH-GS_qnl62pihtkSK5fJG5QFehO0tMph0";
const CHAT_ID = "6019129874";
let currentPhotoIndex = 1;
const TOTAL_PHOTOS = 10;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = function() {
  createHearts();
  document.addEventListener('touchstart', function(){}, {passive: true});
};

// –°–∏—Å—Ç–µ–º–∞ —Å–µ—Ä–¥–µ—á–µ–∫
function createHearts() {
  const container = document.getElementById('hearts-container');
  const heartEmojis = ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú'];
  
  const interval = setInterval(() => {
    const heart = document.createElement('div');
    heart.className = 'heart';
    heart.innerHTML = heartEmojis[Math.floor(Math.random() * heartEmojis.length)];
    
    heart.style.left = `${Math.random() * 100}vw`;
    heart.style.top = '-40px';
    heart.style.animationDuration = `${3 + Math.random() * 4}s`;
    
    heart.addEventListener('click', () => {
      heart.innerHTML = '</3';
      heart.style.fontSize = '32px';
      heart.style.animation = 'none';
      sendAction('clicked_heart');
      
      setTimeout(() => heart.remove(), 1500);
    });
    
    container.appendChild(heart);
    
    setTimeout(() => {
      if (heart.parentNode) heart.remove();
    }, 10000);
  }, 400);
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫—Ä–∞–Ω–∞–º
function nextScreen() {
  const current = document.querySelector('.screen:not(.hidden)');
  const next = current.nextElementSibling;
  
  if (next) {
    current.classList.add('hidden');
    next.classList.remove('hidden');
    sendAction(`read_screen_${current.id.slice(-1)}`);
  }
}

// –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Ç–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ –≥—Ä—É–∑—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏)
function showGallery() {
  const modal = document.getElementById('gallery-modal');
  const img = document.getElementById('gallery-image');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modal.style.display = 'flex';
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å
  currentPhotoIndex = 1;
  img.src = `photos/${currentPhotoIndex}.jpg`;
  document.getElementById('photo-counter').textContent = `${currentPhotoIndex}/${TOTAL_PHOTOS}`;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
  img.onerror = function() {
    this.src = 'placeholder.jpg';
    console.log("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ");
  };
  
  sendAction('gallery_opened');
}

function closeGallery() {
  document.getElementById('gallery-modal').style.display = 'none';
}

function updateGalleryImage() {
  const img = document.getElementById('gallery-image');
  img.src = `photos/${currentPhotoIndex}.jpg`;
  document.getElementById('photo-counter').textContent = `${currentPhotoIndex}/${TOTAL_PHOTOS}`;
}

function nextPhoto() {
  if (currentPhotoIndex < TOTAL_PHOTOS) {
    currentPhotoIndex++;
    updateGalleryImage();
    sendAction(`viewed_photo_${currentPhotoIndex}`);
  }
}

function prevPhoto() {
  if (currentPhotoIndex > 1) {
    currentPhotoIndex--;
    updateGalleryImage();
    sendAction(`viewed_photo_${currentPhotoIndex}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
function NoButtonClick() {
  alert("–Ø —Å–¥–µ–ª–∞—é –≤—Å—ë, —á—Ç–æ–±—ã –∑–∞—Å–ª—É–∂–∏—Ç—å —Ç–≤–æ—ë –¥–æ–≤–µ—Ä–∏–µ...");
  sendAction('pressed_no');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ Telegram
async function sendAction(action) {
  let message;
  
  switch (action) {
    case 'trust':
      message = "üíå –û–Ω–∞ –Ω–∞–∂–∞–ª–∞ '–í–µ—Ä—é, –Ω–æ –ø—Ä–æ–≤–µ—Ä—é'";
      break;
    case 'gallery_opened':
      message = "üñºÔ∏è –û–Ω–∞ –æ—Ç–∫—Ä—ã–ª–∞ –≥–∞–ª–µ—Ä–µ—é";
      break;
    case 'pressed_no':
      message = "üòî –û–Ω–∞ –Ω–∞–∂–∞–ª–∞ '–ù–µ—Ç'";
      break;
    case 'clicked_heart':
      message = "üíî –û–Ω–∞ —Ä–∞–∑–±–∏–ª–∞ —Å–µ—Ä–¥–µ—á–∫–æ";
      break;
    default:
      if (action.startsWith('viewed_photo')) {
        message = `üì∏ –û–Ω–∞ —Å–º–æ—Ç—Ä–∏—Ç —Ñ–æ—Ç–æ ${action.split('_')[2]}`;
      } else {
        message = `–î–µ–π—Å—Ç–≤–∏–µ: ${action}`;
      }
  }
  
  try {
    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${encodeURIComponent(message)}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err);
  }
}